N <- 5000 #抽样个数
x <- c()
x0 <- 0.1 # 初始值
x[1] <- x0
k <- 0 #k表示拒绝转移的次数
u <- runif(N) #抽取均匀分布随机数
for (i in 2:N) {
y <- x[i-1]+runif(1,-0.2,0.2)
if(0<y&y<1){
if (u[i] <=(dbeta(y,a,b)/dbeta(x[i-1],a,b)))
x[i] <- y
else {
x[i]<- x[i-1]
k <-k + 1
}
}
else
x[i]<-x0
}
hist(x,freq=F)
t = acf(x,plot=F)$acf
n = which(t<0.05)
z = x[seq(1000,N,by=n[1])]
ks.test(z,"pbeta",a,b)
}
Beta(2,7)
library(car)
glm
random
sample(0,1)
x=sample(1,10)
x=sample(1,10,1)
x
x=sample(0:1,10,replace = T)
x
x = sample(0:1,10,replace = T)
y = log(3) + runif(length(x))
fit = glm(y ~ x,family = binomial)
y = log(5) + runif(length(x))
fit = glm(y ~ x,family = binomial)
log(3)
y = log(3)*runif(length(x))
fit = glm(y ~ x,family = binomial)
fit = glm(y ~ x)
fit
y
x = sample(0:1,10,replace = T)
y = sample(0:1,10,replace = T)
z = log(3)*runif(length(x))
fit = glm(z ~ x + y)
beta = fit$coefficients
maxlik = function(x,y,beta){
tmp = exp(beta[0]+beta[1]*x+beta[2]*y)
return(-log(tmp/(1+tmp)))
}
fit2 = optim(par = beta,fn=maxlik,logitlik)
fit2 = optim(par = beta,fn=maxlik)
maxlik = function(x,y,beta){
beta = beta
tmp = exp(beta[0]+beta[1]*x+beta[2]*y)
return(-log(tmp/(1+tmp)))
}
fit2 = optim(par = beta,fn=maxlik)
beta
fit2 = optim(beta,x,y,z,fn=maxlik)
fit = glm(z ~ x + y)
beta = fit$coefficients
maxlik = function(x,y,beta){
beta = beta
tmp = exp(beta[0]+beta[1]*x+beta[2]*y)
return(-log(tmp/(1+tmp)))
}
fit2 = optim(beta,x=x,y=y,z=z,fn=maxlik)
Beta = function(a,b){
N <- 5000 #抽样个数
x <- c()
x0 <- 0.1 # 初始值
x[1] <- x0
k <- 0 #k表示拒绝转移的次数
u <- runif(N) #抽取均匀分布随机数
for (i in 2:N) {
y <- x[i-1]+runif(1,-0.2,0.2)
if(0<y&y<1){
if (u[i] <=(dbeta(y,a,b)/dbeta(x[i-1],a,b)))
x[i] <- y
else {
x[i]<- x[i-1]
k <-k + 1
}
}
else
x[i]<-x0
}
hist(x,freq=F)
t = acf(x,plot=F)$acf
n = which(t<0.01)
z = x[seq(1000,N,by=n[1])]
ks.test(z,"pbeta",a,b)
}
Beta(2,7)
Beta = function(a,b){
N <- 5000 #抽样个数
x <- c()
x0 <- 0.1 # 初始值
x[1] <- x0
k <- 0 #k表示拒绝转移的次数
u <- runif(N) #抽取均匀分布随机数
for (i in 2:N) {
y <- x[i-1]+runif(1,-0.2,0.2)
if(0<y&y<1){
if (u[i] <=(dbeta(y,a,b)/dbeta(x[i-1],a,b)))
x[i] <- y
else {
x[i]<- x[i-1]
k <-k + 1
}
}
else
x[i]<-x0
}
hist(x)
t = acf(x,plot=F)$acf
n = which(t<0.05)
z = x[seq(1000,N,by=n[1])]
ks.test(z,"pbeta",a,b)
}
Beta(2,7)
N <-10000 #抽样个数
x <- c()
x0 <-100 # 初始值
x[1] <- x0
k <- 0 #k表示拒绝转移的次数
u <- runif(N) #抽取均匀分布随机数
for (i in 2:N) {
y <- rnorm(1, x[i - 1],2)
if (u[i] <(dnorm(y,3,5)/dnorm(x[i - 1],3,5)))
x[i] <- y else {
x[i] <- x[i - 1]
k <- k + 1
}
}
---------------------
作者：yujunbeta
来源：CSDN
原文：https://blog.csdn.net/yujunbeta/article/details/21303341
版权声明：本文为博主原创文章，转载请附上博文链接！
x
hist(x)
hist(x[500:N],freq=F)
curve(dnorm(x,3,5),add=TRUE)
Beta = function(a,b,N){
x <- c()
x0 <-100 # 初始值
x[1] <- x0
k <- 0 #k表示拒绝转移的次数
u <- runif(N) #抽取均匀分布随机数
for (i in 2:N) {
y <- rnorm(1, x[i - 1],sqrt(b))
if (u[i] <(dnorm(y,a,b)/dnorm(x[i - 1],a,b)))
x[i] <- y else {
x[i] <- x[i - 1]
k <- k + 1
}
}
hist(x[500:N],freq = F)
t = acf(x,plot=F)$acf
n = which(t<0.05)
z = x[seq(1000,N,by=n[1])]
ks.test(z,"pnorm",a,b)
}
Norm = function(a,b,N){
x <- c()
x0 <-100 # 初始值
x[1] <- x0
k <- 0 #k表示拒绝转移的次数
u <- runif(N) #抽取均匀分布随机数
for (i in 2:N) {
y <- rnorm(1, x[i - 1],sqrt(b))
if (u[i] <(dnorm(y,a,b)/dnorm(x[i - 1],a,b)))
x[i] <- y else {
x[i] <- x[i - 1]
k <- k + 1
}
}
hist(x[500:N],freq = F)
t = acf(x,plot=F)$acf
n = which(t<0.05)
z = x[seq(1000,N,by=n[1])]
ks.test(z,"pnorm",a,b)
}
Norm(3,5)
Norm(3,5,10000)
Norm = function(a,b,N){
x <- c()
x0 <-100 # 初始值
x[1] <- x0
k <- 0 #k表示拒绝转移的次数
u <- runif(N) #抽取均匀分布随机数
for (i in 2:N) {
y <- rnorm(1, x[i - 1],sqrt(b))
if (u[i] <(dnorm(y,a,b)/dnorm(x[i - 1],a,b)))
x[i] <- y else {
x[i] <- x[i - 1]
k <- k + 1
}
}
hist(x[500:N],freq = F)
curve(dnorm(x,3,5),add=TRUE)
ks.test(x[500:N],"pnorm",a,b)
}
Norm(3,5,10000)
Norm = function(a,b,N){
x <- c()
x0 <-100 # 初始值
x[1] <- x0
k <- 0 #k表示拒绝转移的次数
u <- runif(N) #抽取均匀分布随机数
for (i in 2:N) {
y <- rnorm(1, x[i - 1],sqrt(b))
if (u[i] <(dnorm(y,a,b)/dnorm(x[i - 1],a,b)))
x[i] <- y else {
x[i] <- x[i - 1]
k <- k + 1
}
}
hist(x[500:N],freq = F)
curve(dnorm(x,a,b),add=TRUE)
}
Norm(2,4,10000)
normtest = function(data,alpha=0.05) {
if (0 == (n <- length(data)))
stop("data is empty or has only NAs")
par(mfrow=c(2,1))
drop = which(data==0)
if(length(drop)>0)
x = sort(data[-drop],decreasing = T) else
x = sort(data,decreasing = T)
n = length(x)
unif.p = -log10(ppoints(n))
plot(unif.p,x,pch=16,main = 'QQ-plot',xlab = 'Expected',ylab = 'observed',col = 'red')
lines(c(0,max(unif.p)),c(0,max(unif.p)),lty=2,col = 'blue')
hist(data,freq=F,main="直方图和密度估计曲线")
lines(density(data),col="blue")
x = c(round(min(data)):round(max(data)))
lines(x,dnorm(x,mean(data),sd(data)),col="red")
test = shapiro.test(data)
if(test$p.value>alpha){
print(paste("success:服从正态分布,p.value=",test$p.value,">",alpha))
}else{
print(paste("error:不服从正态分布,p.value=",test$p.value,"<=",alpha))
}
test
}
l=rnorm(100)
normtest(1)
normtest(l)
r=rnorm(10000)
normtest(r)
r=rnorm
r=rnorm(3333)
normtest(r)
r=null
r=NULL
normtest(r)
devtools::use_vignette
library(devtools)
devtools::build_vignettes()
devtools::document()
devtools::document()
devtools::build_vignettes()
library(StatComp18052)
devtools::build_vignettes()
devtools::build_vignettes()
library(StatComp18052)
devtools::build_vignettes()
vignette()
library(StatComp18052)
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
library(latticeExtra)
library(RANN)
library(energy)
library(Ball)
library(boot)
library(ggplot2)
m <- 10000
burn.in <- 2000
sizes <- c(125,18,20,34)
size <- sum(sizes)
prob <- function(theta){
p <- c(0.5+theta/4,(1-theta)/4,(1-theta)/4,theta/4)
}
prob.ratio <- function(n,d){
prod(prob(n)^sizes/prob(d)^sizes)
}
# random walk
# using unif(-0.25,0.25) as step
x.rw <- numeric(m)
k.rw <- 0
u <- runif(m)
v <- runif(m,-0.25,0.25)
x.rw[1] <- v[1]
for (i in 2:m){
xt <- x.rw[i-1]
y <- xt + v[i]
r <- min(prob.ratio(y,xt),1)
if(!is.nan(r) && u[i] <= r){
x.rw[i] <- y
}else{
k.rw <- k.rw + 1
x.rw[i] <- xt
}
}
print(k.rw)
# MH samplings
sd <- 0.5
min <- -0.8
max <- 0.8
rg <- function(p){
return(runif(1,min-abs(p),max+abs(p)))
}
dg <- function(x,p){
return(dunif(x,min-abs(p),max+abs(p)))
}
x.mh <- numeric(m)
k.mh <- 0
u <- runif(m)
x.mh[1] <- rg(0)
for(i in 2:m){
xt <- x.mh[i-1]
y <- rg(xt)
r <- min(prob.ratio(y,xt)*dg(xt,y)/dg(y,xt),1)
if(!is.na(r) && u[i] <= r){
x.mh[i] <- y
}else{
x.mh[i] <- xt
k.mh <- k.mh + 1
}
}
print(k.mh)
# independence sampler
x.i <- numeric(m)
k.i <- 0
x.i[i] <- rg(0)
u <- runif(m)
for(i in 2:m){
xt <- x.i[i-1]
y <- rg(0)
r <- prob.ratio(y,xt)*dg(xt,0)/dg(y,0)
if(u[i] <= r){
x.i[i] <- y
}else{
x.i[i] <- xt
k.i <- k.i + 1
}
}
print(k.i)
#histogram
par(mfrow=c(3,2))
is <- (burn.in + 1):m
xs <- as.list(x.rw,x.mh)
x <- x.rw[is]
hist(x,probability=TRUE)
plot(is,x,type="l")
x <- x.mh[is]
hist(x,probability=TRUE)
plot(is,x,type="l")
x <- x.i[is]
hist(x,probability=TRUE)
plot(is,x,type="l")
par(mfrow=c(1,1))
mu.rw <- mean(x.rw[is])
mu.mh <- mean(x.mh[is])
mu.i <- mean(x.i[is])
print(c(mu.rw,mu.mh,mu.i))
devtools::build_vignettes()
library(StatComp18052)
normtest
library(StatComp18052)
library(StatComp18052)
normtest
devtools::document()
normtest()
Norm()
cvm
chickwts
library(latticeExtra)
library(RANN)
library(energy)
library(Ball)
library(boot)
library(ggplot2)
##function:two-sample Cramer-von Mises test for equal distributions
cvm <- function(x,y,data){
r <- 1000 #permutation samples
reps <- numeric(r)
n <- length(x)
m <- length(y)
v.n <- numeric(n)
v1.n <- numeric(n)
v.m <- numeric(m)
v1.m <- numeric(m)
z <- c(x,y)
N <- length(z)
Ix <- seq(1:n)
Iy <- seq(1:m)
v.n <- (x-Ix)**2
v.m <- (y-Iy)**2
#test statistic
reps_0 <- ((n * sum(v.n)+m * sum(v.m))/(m * n * N))-(4 * m * n - 1)/(6 * N)
for (k in 1:r){#permutation samples
w <- sample(N,size=n,replace=FALSE)
x1 <- sort(z[w])
y1 <- sort(z[-w])
v1.n <- (x1-Ix)**2
v1.m <- (y1-Iy)**2
reps[k] <- ((n * sum(v1.n)+m * sum(v1.m))/(m * n * N))-(4 * m * n - 1)/(6 * N)
}
p <- mean(c(reps_0,reps) >= reps_0)
return(
histogram(c(reps_0,reps),
type="density",
col="#0080ff",
xlab="Replicates of Cramer-Von Mises statistic",
ylab=list(rot=0),
main=paste0("Data:",data),
sub=list(substitute(paste(hat(p),"=",pvalue),list(pvalue=p)),col=2),
panel=function(...){
panel.histogram(...)
panel.abline(v=reps_0,col=2,lwd=2)
})
)
}
##Data: Example 8.1
attach(chickwts)
x <- sort(as.vector(weight[feed == "soybean"]))
y <- sort(as.vector(weight[feed == "linseed"]))
cvm1 <- cvm(x,y,"Example 8.1")
##Data: Example 8.2
x <- sort(as.vector(weight[feed == "sunflower"]))
y <- sort(as.vector(weight[feed == "linseed"]))
detach(chickwts)
cvm2 <- cvm(x,y,"Example 8.2")
##Results
print(cvm1)
print(cvm2)
library(StatComp18052)
devtools::document()
?normtest
?cvm
?Norm
devtools::build_vignettes()
devtools::build_vignettes()
library(StatComp18052)
normtest
1
library(StatComp18052)
boot
library(boot)
library(StatComp18052)
normtest(rnorm(1000))
Norm(3,5,10000)
cvm
?cvm
attach(chickwts)
x <- sort(as.vector(weight[feed == "soybean"]))
y <- sort(as.vector(weight[feed == "linseed"]))
cvm1 <- cvm(x,y,"Example 8.1")
library(Numpy)
library(latticeExtra)
install.packages('latticeExtra')
install.packages("latticeExtra")
library(latticeExtra)
library(StatComp18052)
cvm
?cvm
attach(chickwts)
x <- sort(as.vector(weight[feed == "soybean"]))
y <- sort(as.vector(weight[feed == "linseed"]))
cvm1 <- cvm(x,y,"Example 8.1")
library(latticeExtra)
attach(chickwts)
x <- sort(as.vector(weight[feed == "soybean"]))
y <- sort(as.vector(weight[feed == "linseed"]))
cvm1 <- cvm(x,y,"Example 8.1")
cvm1
library(StatComp18052)
?cvm
?cvm
library(StatComp18052)
?cvm
library(StatComp18052)
cvm
library(StatComp18052)
？cvm
?cvm
attach(chickwts)
library(latticeExtra)
x <- sort(as.vector(weight[feed == "soybean"]))
y <- sort(as.vector(weight[feed == "linseed"]))
cvm1 <- cvm(x,y,"Example 8.1")
cvm1
library(StatComp18052)
devtools::document()
library(StatComp18052)
use_packages
use_package
library(StatComp18052)
library(StatComp18052)
devtools::document()
library(StatComp18052)
